export function remarkExtractChangelogFilters(mdxExtracts) {
    return (tree) => {
        var _a, _b;
        const tagCounts = new Map();
        for (let nodeIndex = 0; nodeIndex < tree.children.length; nodeIndex++) {
            const node = tree.children[nodeIndex];
            if (!node || node.type !== 'mdxJsxFlowElement' || node.name !== 'Update') {
                continue;
            }
            const tagsAttribute = node.attributes.find((attr) => 'name' in attr && attr.name === 'tags');
            if (!tagsAttribute || !tagsAttribute.value || typeof tagsAttribute.value !== 'object') {
                continue;
            }
            let tags = [];
            try {
                tags = JSON.parse(tagsAttribute.value.value);
            }
            catch (_c) {
                if (((_b = (_a = tagsAttribute.value.data) === null || _a === void 0 ? void 0 : _a.estree) === null || _b === void 0 ? void 0 : _b.body.length) === 1) {
                    const body = tagsAttribute.value.data.estree.body[0];
                    if ((body === null || body === void 0 ? void 0 : body.type) === 'ExpressionStatement' && body.expression.type === 'ArrayExpression') {
                        tags = body.expression.elements
                            .map((element) => {
                            return (element === null || element === void 0 ? void 0 : element.type) === 'Literal' ? element.value : null;
                        })
                            .filter(Boolean);
                    }
                }
            }
            if (!Array.isArray(tags)) {
                continue;
            }
            tags.forEach((tag) => {
                if (!!tag.trim()) {
                    tagCounts.set(tag, (tagCounts.get(tag) || 0) + 1);
                }
            });
        }
        const filters = Array.from(tagCounts.entries())
            .map(([tag, count]) => ({
            tag,
            count,
        }))
            .sort((a, b) => b.count - a.count);
        if (mdxExtracts && filters.length) {
            mdxExtracts.changelogFilters = filters;
        }
    };
}
