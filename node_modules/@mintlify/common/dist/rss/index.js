export const isFrontmatter = (node) => {
    return (node === null || node === void 0 ? void 0 : node.type) === 'yaml';
};
export const isUpdate = (node) => {
    return (node === null || node === void 0 ? void 0 : node.type) === 'mdxJsxFlowElement' && node.name === 'Update';
};
export const containsUpdates = (tree) => {
    return tree.children.some((child) => isUpdate(child));
};
export const getTags = (node) => {
    var _a, _b;
    let tags = [];
    const tagsAttribute = node.attributes.find((attr) => 'name' in attr && attr.name === 'tags');
    if (!tagsAttribute || !tagsAttribute.value || typeof tagsAttribute.value !== 'object') {
        return tags;
    }
    try {
        tags = JSON.parse(tagsAttribute.value.value);
    }
    catch (_c) {
        if (((_b = (_a = tagsAttribute.value.data) === null || _a === void 0 ? void 0 : _a.estree) === null || _b === void 0 ? void 0 : _b.body.length) === 1) {
            const body = tagsAttribute.value.data.estree.body[0];
            if ((body === null || body === void 0 ? void 0 : body.type) === 'ExpressionStatement' && body.expression.type === 'ArrayExpression') {
                body.expression.elements.map((element) => {
                    if ((element === null || element === void 0 ? void 0 : element.type) === 'Literal' && typeof element.value === 'string') {
                        tags.push(element.value);
                    }
                });
            }
        }
    }
    return tags;
};
